{
  "name": "Flux",
  "tagline": "A programming language",
  "body": "# Flux\r\n\r\nFlux is a statically typed C-like language, that will initially compile to Lua, although more compilation targets are planned.\r\n\r\n### Development\r\n\r\nRight now, a Lua-based Flux parser exists that can do a basic conversion from Flux to Lua.\r\nThis has allowed a Flux parser written in Flux to be started (in development now), that will also do the type checking, optimisation, and proper compilation.\r\n\r\n### Syntax examples\r\n\r\nDistance between two vectors.\r\n```\r\nfloat distance(Vec2 a, b = new Vec2( 0, 0 )) = math::sqrt( dx * dx + dy * dy )\r\n\twhere dx = a.x - b.x\r\n\twhere dy = a.y - b.y;\r\n```\r\n\r\nFactorial calculation.\r\n```\r\nlet x `!` = match x {\r\n\t0, 1 => 1;\r\n\tdefault => x * (x - 1) `!`;\r\n};\r\n```\r\n\r\nTwo dimensional array class.\r\n```\r\ntemplate<T>\r\nclass 2DArray<T> {\r\n\tprivate T[][] elements;\r\n\r\n\t2DArray(int dim1 = 0, dim2 = 0, T value = new T) {\r\n    \tforeach (i in 0 .. dim2-1) { // note the brackets are optional\r\n\t\t\telements[i] = [];\r\n\t\t\tfor (int n = 0, n < dim1, n++)\r\n\t\t\t\telements[i][n] = value;\r\n\t\t}\r\n \t}\r\n\r\n\tgetter elements() {\r\n\t\treturn table::deep_copy( elements );\r\n\t}\r\n\r\n\tT operator[](int i1, i2)\r\n\t\t= elements[i2] && elements[i2][i1];\r\n\r\n\tvoid operator[]=(int i1, i2, T value) {\r\n\t\telements[i2] = elements[i2] || [];\r\n\t\telements[i2][i1] = value;\r\n\t}\r\n}\r\n\r\nnew 2DArray<int> myArray(5, 5);\r\nprint( myArray[3, 4] );\r\n```\r\n\r\n```\r\ntemplate<T>\r\nvoid add_one_to(T& n)\r\n\tn++;\r\n\r\nint& x = 0;\r\nadd_one_to( x );\r\nprint( x ); // 1\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}