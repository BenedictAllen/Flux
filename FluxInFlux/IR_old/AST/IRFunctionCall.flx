
IRFunctionCall IRFunctionCall:lookupFunction(IRDefinitionPointer[] list, IRNode[] parameters) {
	int max_weighting = 0;
	IRDefinitionPointer max_ptr = null;
	IRNode[] call_parameters;

	// fuck this

	foreach call_ptr in list {
		let signature = call_ptr:definition().type;

		if (signature typeof IRTypeSignatureFunction) { // just for the type checker, it should always be a function signature
			// fix this pseudocode
			let min_parameter_weighting = valid_parameter_count && weighting_of_exact_match || 0;

			foreach parameter in parameters {
				// update min_parameter_weighting
			}

			if max_weighting < min_parameter_weighting {
				max_ptr = call_ptr;
				max_weighting = min_parameter_weighting;
				// do parameter casting?
				// keep a list of types for the template specialisation later?
			}

			max_weighting = math.max( max_weighting, min_parameter_weighting );
		}
	}

	if max_weighting > 0 {
		// if necessary, specialise template(s)
		// cast parameters

		return max_ptr;
	}
}

string IRFunctionCall:tostring() {

}
