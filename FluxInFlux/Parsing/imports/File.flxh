
import Context;
import Lexer;
import TemplatedName;
import ASTNode;

namespace Flux::Parsing;

// class TypeDeclaration = struct { Type type, TemplatedName name, bool is_public }

class File {
	string name;
	string path;

	Source source;

	string[] imports;

	TypeDeclaration[] types;
	ASTNode[] statements;
	ASTNode[] header_statements;

	bool is_header = true;

	Lexer lexer;

	Context[] contexts;
	Block[] blocks;

	string{string} environment;

	File(string name, string path, Source source) {
		self.name = name;
		self.path = path;
		self.source = source;
		self.imports = [];
		self.types = [];
		self.statements = [];
		self.header_statements = [];
		self.contexts = [];
		self.blocks = [];
		self.environment = {};

		foreach k, v in source.environment
			self.environment[k] = v;
	}

	void initialise_lexer(string source);

	void add_import(string file);

	void define_type(Type t, TemplatedName name, bool is_public);
	void push(ASTNode node);

	Context push_context();
	void pop_context();

	void push_block(Position position, bool is_void);
	Block pop_block();
}
