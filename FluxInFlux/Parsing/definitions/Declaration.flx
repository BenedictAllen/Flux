
import ASTNode;
import TemplatedName;
import TemplateList;

namespace Flux::Parsing;

/*
template<T>
const public int f(float v) {
	return 10 + math::floor( v );
}
*/

// stores function and variable declarations/definitions
class Declaration extends ASTNode {
	TemplatedName type;
	string name;

	bool is_const;
	bool is_public;

	TemplateList _template;

	ASTNode definition;

	Declaration(TemplatedName type, string name, Position position, bool is_const, is_public, is_static, TemplateList _template, ASTNode definition) {
		self.type = type;
		self.name = name;
		self.position = position;
		self.is_const = is_const;
		self.is_public = is_public;
		self.is_static = is_static;
		self._template = _template;
		self.definition = definition;
	}

	string serialize();
}

string Declaration:serialize() {
	string r = "";

	if self._template {
		r = "template <" `concat` self._template:serialize() `concat` ">\n";
	}

	r = r
		`concat` (self.is_const && "const " || "")
		`concat` (self.is_public && "public " || "private ")
		`concat` (self.is_static && "static " || "");

	r = r `concat` self.type:serialize() `concat` " " `concat` self.name;

	return r `concat` (self.definition && " = " `concat` self.definition:serialize() || "") `concat` ";";
}
