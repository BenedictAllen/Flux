
namespace Flux::Parsing;

class FunctionParameter extends ASTNode {
	Type _type;
	string name;

	FunctionParameter(Type _type, string name, null Position position = _type.position) {
		self._type = _type;
		self.name = name;
		self.position = position;
	}

	FunctionParameter parse(Source source, bool parameterNamesGiven, null FunctionParameter prev);
}

FunctionParameter FunctionParameter:parse(Source source, bool parameterNamesGiven, null FunctionParameter prev) {
	let lexer = source.lexer;

	Type type;

	try {
		type = Flux::Parsing::Type:parse(source);
	}
	catch ParserException e {
		if parameterNamesGiven && e != "expected typename"
			throw new ParserException(e);
	}

	let name = parameterNamesGiven && lexer:skipValue( Identifier );

	if name == null || type == null {
		if type != null && prev != null && #type.classes == 0 {
			name = type.name;
			type = prev._type;
		}
		else if !parameterNamesGiven {
			type = type || prev._type;
		}
		else if type != null {
			source:error "expected name after type";
		}
		else {
			source:error "expected typename";
		}
	}

	return new Flux::Parsing::FunctionParameter( type, name || "" );
}

string FunctionParameter:serialize()
	= self._type:serialize() `concat` " " `concat` self.name;
