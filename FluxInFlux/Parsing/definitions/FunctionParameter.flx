
namespace Flux::Parsing;

class FunctionParameter extends ASTNode {
	Type type;
	string name;

	FunctionParameter(Type type, string name, null Position position = type.position) {
		self.type = type;
		self.name = name;
		self.position = position;
	}

	FunctionParameter parse(Source source, bool parameterNamesGiven, null FunctionParameter prev);
}

FunctionParameter FunctionParameter:parse(Source source, bool parameterNamesGiven, null FunctionParameter prev) {
	Lexer lexer = source.lexer;
	Type type;

	try {
		type = Flux::Parsing::Type:parse(source);
	}
	catch ParserException e {
		if parameterNamesGiven && !e:find "expected typename"
			throw new ParserException( e );
	}

	string name = parameterNamesGiven && lexer:skipValue( Identifier );

	if !name && lexer:test( Symbol, "..." ) {
		if !type && !prev
			source:error( "expected type before '...'" );

		name = lexer:next().value;
	}

	if name == null || type == null {
		if type != null && prev != null && #type.classes == 0 {
			name = type.name;
			type = prev.type;
		}
		else if type == null && name != null && prev != null {
			type = prev.type;
		}
		else if !parameterNamesGiven {
			type = type || prev.type;
		}
		else if type != null {
			source:error "expected name after type";
		}
		else {
			source:error "expected typename";
		}
	}

	return new Flux::Parsing::FunctionParameter( type, name || "" );
}

string FunctionParameter:serialize()
	= self.type:serialize() `concat` " " `concat` self.name;
