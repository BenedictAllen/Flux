
import TemplatedName;

namespace Flux::Parsing;

class OperatorTypeof extends RightUnaryExpression {
	Expression value;
	TemplatedName type;

	OperatorTypeof( Expression value, TemplatedName type, null Position position = value.position ) {
		self.value = value;
		self.type = type;
		self.position = position;
	}
}

ASTNode OperatorTypeof:parse( Source source, Expression value )
	= isCalled && new Flux::Parsing::OperatorTypeof( value, type, position )
	where lexer = source.lexer
	where position = lexer:get().position
	where isCalled = lexer:skip( Keyword, "typeof" )
	where type = value && isCalled && Flux::Parsing::types::parse(source)
	where value = value || isCalled && Flux::Parsing::LeftUnaryExpression:parse(source);

string OperatorTypeof:serialize()
	= Flux::Parsing::serializeExpression( self.value ) `concat` " typeof " `concat` self.type:serialize();
