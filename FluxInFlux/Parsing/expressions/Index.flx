
namespace Flux::Parsing;

Index Index:parse( Source source, Expression value ) {
	let lexer = source.lexer;
	let index -> Expression[] = [];
	let position = lexer:get().position;

	if lexer:skip( Symbol, "[" ) {
		repeat
			index[#index + 1] = Flux::Parsing::Expression:parse(source) || source:error "expected parameter";
		while lexer:skip( Symbol, "," );

		if !lexer:skip( Symbol, "]" ) source:error "expected ']' to close index";

		return new Flux::Parsing::Index( value, index, position );
	}
}

string Index:serialize()
	= Flux::Parsing::serializeExpression( self.value ) `concat` "[" `concat` (self.index `concattenate` ", ") `concat` "]";
