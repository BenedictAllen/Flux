
// ! FunctionExpression
// !! requires function parameter parsing, which is a pain in the butt
// ! Lambdas!!!!
// !! also requires function parameter parsing, which is still a pain in the butt
// ! Haven't I already done these?

import ConstantExpression;
import FunctionExpression;
import ListExpression;
import MatchExpression;
import NewExpression;
import ReferenceExpression;
import TableExpression;
import ThrowExpression;
import VarargExpression;

namespace Flux::Parsing;

class PrimaryExpression extends Flux::Parsing::Expression {
	static ASTNode parse(Source source);
}

ASTNode PrimaryExpression:parse( Source source )
	 = expr && (lexer:skip(Symbol, ")") || source:error "expected ')' after expression") && expr
	|| Flux::Parsing::ConstantExpression:parse( source )
	|| Flux::Parsing::FunctionExpression:parse( source )
	|| Flux::Parsing::ListExpression:parse( source )
	|| Flux::Parsing::MatchExpression:parse( source )
	|| Flux::Parsing::NewExpression:parse( source )
	|| Flux::Parsing::ReferenceExpression:parse( source )
	|| Flux::Parsing::TableExpression:parse( source )
	|| Flux::Parsing::ThrowExpression:parse( source )
	|| Flux::Parsing::VarargExpression:parse( source )
	where lexer = source.lexer
	where expr = lexer:skip(Symbol, "(") && (Flux::Parsing::Expression:parse(source) || source:error "expected expression after '('");
