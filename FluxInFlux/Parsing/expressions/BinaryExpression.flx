
import operators.OperatorExpressionStack;

namespace Flux::Parsing;

bool isAssignmentOperator( string op )
	= Flux::Parsing::language::binary_operators[op] == 1;

class BinaryExpression extends RightUnaryExpression {
	Expression lvalue, rvalue;
	string op;

	BinaryExpression( Expression lvalue, Expression rvalue, string op, null Position position = lvalue.position ) {
		self.lvalue = lvalue;
		self.rvalue = rvalue;
		self.op = op;
		self.position = position;
	}
}

ASTNode BinaryExpression:parse(Source source) {
	new Flux::Parsing::OperatorExpressionStack stack();

	if !stack:get_first_term( source ) return;

	while stack:get_next_term( source ) {}

	return stack:result();
}

string BinaryExpression:serialize()
	= Flux::Parsing::serializeExpression( self.lvalue ) `concat` " "
	  `concat` self.op `concat`
	  " " `concat` Flux::Parsing::serializeExpression( self.rvalue );
