
import ConstantType;

namespace Flux::Parsing;

class MethodCall extends RightUnaryExpression {
	string name;
	Expression value;
	Expression[] parameters;

	MethodCall( Expression value, string name, Expression[] parameters, null Position position = value.position ) {
		self.name = name;
		self.value = value;
		self.parameters = parameters;
		self.position = position;
	}

	static ASTNode parse(Source source);
}

ASTNode MethodCall:parse( Source source, Expression value ) {
	let lexer = source.lexer;
	let parameters -> Expression[] = [];
	let position = lexer:get().position;

	if !lexer:skip( Symbol, ":" ) return;

	let name = lexer:skipValue( Identifier ) || source:error "expected name after ':'";

	if lexer:skip( Symbol, "(" ) {
		if !lexer:skip( Symbol, ")" ) {
			repeat
				parameters[#parameters + 1] = Flux::Parsing::Expression:parse(source) || source:error "expected parameter";
			while lexer:skip( Symbol, "," );

			if !lexer:skip( Symbol, ")" ) source:error "expected ')' to close function call";
		}

		return new Flux::Parsing::MethodCall( value, name, parameters, position );
	}
	else if lexer:test( String ) {
		parameters[1] = new Flux::Parsing::ConstantExpression( Flux::Parsing::ConstantType.String, lexer:next().value, position );

		return new Flux::Parsing::MethodCall( value, name, parameters, position );
	}
	else
		source:error "expected '(' after method name";
}

string MethodCall:serialize()
	= Flux::Parsing::serializeExpression( self.value ) `concat` ":" `concat` self.name `concat` "(" `concat` (self.parameters `concattenate` ", ") `concat` ")";
