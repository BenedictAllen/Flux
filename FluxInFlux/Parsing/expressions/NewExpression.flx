
import ConstantType;

namespace Flux::Parsing;

class NewExpression extends PrimaryExpression {
	Type _type;
	Expression[] parameters;

	NewExpression( Type _type, Expression[] parameters, null Position position = _type.position ) {
		self._type = _type;
		self.parameters = parameters;
		self.position = position;
	}

	static ASTNode parse(Source source);
}

ASTNode NewExpression:parse( Source source ) {
	let lexer = source.lexer;
	let parameters -> Expression[] = [];
	let position = lexer:get().position;

	if !lexer:skip( Keyword, "new" ) return;

	let type = Flux::Parsing::Type:parse( source );

	if lexer:skip( Symbol, "(" ) {
		if !lexer:skip( Symbol, ")" ) {
			repeat
				parameters[#parameters + 1] = Flux::Parsing::Expression:parse(source) || source:error "expected parameter";
			while lexer:skip( Symbol, "," );

			if !lexer:skip( Symbol, ")" ) source:error "expected ')' to close function call";
		}
	}
	else if lexer:test( String )
		parameters[1] = new Flux::Parsing::ConstantExpression( Flux::Parsing::ConstantType.String, lexer:next().value, position );

	return new Flux::Parsing::NewExpression( type, parameters, position );
}

string NewExpression:serialize()
	= "new " `concat` self._type:serialize() `concat` "(" `concat` (self.parameters `concattenate` ", ") `concat` ")";
