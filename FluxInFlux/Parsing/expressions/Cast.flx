
namespace Flux::Parsing;

class Cast extends RightUnaryExpression {
	ASTNodeType type = Flux::Parsing::ASTNodeType.Cast;
	Expression value;
	Type _type;

	Cast( Expression value, Type type, null Position position = value.position ) {
		self.value = value;
		self._type = type;
		self.position = position;
	}
}

Cast Cast:parse( Source source, Expression value )
	= type && new Flux::Parsing::Cast( value, type, position )
	where lexer = source.lexer
	where position = lexer:get().position
	where type = lexer:skip( Symbol, "->" ) && Flux::Parsing::Type:parse(source);

string Cast:serialize()
	= Flux::Parsing::serializeExpression( self.value ) `concat` " -> " `concat` self._type:serialize();
