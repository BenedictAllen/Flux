
import ConstantType;

namespace Flux::Parsing;

class ConstantExpression extends Flux::Parsing::PrimaryExpression {
	ConstantType type;
	string value;

	ConstantExpression(ConstantType type, string value, Position position) {
		self.type = type;
		self.value = value;
		self.position = position;
	}
}

ASTNode ConstantExpression:parse(Source source) {
	let token = source.lexer:get();

	if source.lexer:skip(Keyword, "null")
		return new Flux::Parsing::ConstantExpression(
			Flux::Parsing::ConstantType.Null,
			"null",
			token.position
		);

	switch token.type;
	case String
		return new Flux::Parsing::ConstantExpression(
			Flux::Parsing::ConstantType.String,
			source.lexer:next().value,
			token.position
		);
	case Character
		return new Flux::Parsing::ConstantExpression(
			Flux::Parsing::ConstantType.Character,
			source.lexer:next().value,
			token.position
		);
	case Integer
		return new Flux::Parsing::ConstantExpression(
			Flux::Parsing::ConstantType.Integer,
			source.lexer:next().value,
			token.position
		);
	case Float
		return new Flux::Parsing::ConstantExpression(
			Flux::Parsing::ConstantType.Float,
			source.lexer:next().value,
			token.position
		);
	case Byte
		return new Flux::Parsing::ConstantExpression(
			Flux::Parsing::ConstantType.Byte,
			source.lexer:next().value,
			token.position
		);
	case Hexadecimal
		return new Flux::Parsing::ConstantExpression(
			Flux::Parsing::ConstantType.Integer,
			source.lexer:next().value,
			token.position
		);
	case Binary
		return new Flux::Parsing::ConstantExpression(
			Flux::Parsing::ConstantType.Integer,
			source.lexer:next().value,
			token.position
		);
	case Boolean
		return new Flux::Parsing::ConstantExpression(
			Flux::Parsing::ConstantType.Boolean,
			source.lexer:next().value,
			token.position
		);
	default
		return null;
}

string ConstantExpression:serialize()
	= match self.type {
		Flux::Parsing::ConstantType.String => ("%q"):format( self.value );
		Flux::Parsing::ConstantType.Character => "'" `concat` self.value `concat` "'";
		default => self.value;
	};
