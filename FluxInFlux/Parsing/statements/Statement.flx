
namespace Flux::Parsing {
	class Statement;
}

import ImportStatement;
import IfStatement;
import WhileLoop;
import RepeatLoop;
import DoStatement;
import ForLoop;
import ForeachLoop;
import SwitchStatement;
import TryStatement;
import NewStatement;
import ReturnStatement;
import BreakStatement;
import ContinueStatement;
import LetStatement;

import NamespaceStatement;
import UsingStatement;

namespace Flux::Parsing;

class Statement extends Flux::Parsing::ASTNode {
	bool parse(Source source);
}

void Statement:parse(Source source) {
	let lexer = source.lexer;

	if Flux::Parsing::Definition:parse(source)
	|| Flux::Parsing::EnumDefinition:parse( source )
	|| Flux::Parsing::ClassDefinition:parse(source)
	|| Flux::Parsing::InterfaceDefinition:parse( source )
	|| Flux::Parsing::NamespaceStatement:parse( source )
	|| Flux::Parsing::UsingStatement:parse( source )
	|| Flux::Parsing::IfStatement:parse( source )
	|| Flux::Parsing::WhileLoop:parse( source )
	|| Flux::Parsing::RepeatLoop:parse( source )
	|| Flux::Parsing::DoStatement:parse( source )
	|| Flux::Parsing::ForLoop:parse( source )
	|| Flux::Parsing::ForeachLoop:parse( source )
	|| Flux::Parsing::SwitchStatement:parse( source )
	|| Flux::Parsing::TryStatement:parse( source )
	|| Flux::Parsing::NewStatement:parse(source)
	|| Flux::Parsing::ReturnStatement:parse( source )
	|| Flux::Parsing::BreakStatement:parse( source )
	|| Flux::Parsing::ContinueStatement:parse( source )
	|| Flux::Parsing::LetStatement:parse( source )
		return;

	let expr = Flux::Parsing::Expression:parse(source);

	if expr {
		Flux::Parsing::expectSemicolon( source, "end of expression" );
		source:push( expr );
	}
	else
		source:error "unexpected token: expected statement or expression";
}
