
namespace Flux::Parsing;

class ImportStatement extends Flux::Parsing::Statement {
	string name;

	ImportStatement(string name, Position position) {
		self.name = name;
		self.position = position;
	}
}

bool ImportStatement:parse(Source source) {
	let lexer = source.lexer;
	let position = lexer:get().position;

	if !lexer:skip( Keyword, "import" )
		return false;

	let name = lexer:skipValue( Identifier ) || lexer:skipValue( String ) || source:error "expected name to import";

	while lexer:skip( Symbol, "." )
		name = name `concat` "." `concat` (lexer:skipValue( Identifier ) || lexer:skipValue( String ) || source:error "expected name to import");

	Flux::Parsing::expectSemicolon(source, "import statement");

	let filename = source:importFile( name, position );

	if filename == "" {
		source:error( "failed to find file '" `concat` name `concat` "'", position );
	}

	// add this at some point+
	// it'll allow per-file dependencies rather than per-project
	// i.e. when looking up a name in this file, it'll look in all its imports
	// source:push( new Flux::Parsing::ImportStatement( filename ) );

	return true;
}

string ImportStatement:serialize() {
	return "import " `concat` self.name `concat` ";";
}
