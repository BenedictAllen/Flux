
namespace Flux::Parsing;

bool NamespaceStatement:parse(Source source) {
	let lexer = source.lexer;
	let position = lexer:get().position;

	if lexer:test( Keyword, "namespace" ) && !source.context.isNamespace
		source:error "invalid location for 'namespace'";

	if !lexer:skip( Keyword, "namespace" )
		return false;

	string name = Flux::Parsing::parseName( source ) || source:error "expected name after 'namespace'";
	
	source:pushNamespaceContext( name );
	source:pushBlock();

	if lexer:skip( Symbol, "{" ) {
		while !lexer:skip( Symbol, "}" ) {
			if lexer:isEOF() source:error "expected '}' to block";

			Flux::Parsing::Statement:parse(source);
		}
	}
	else if lexer:skip( Symbol, ";" )
		while !lexer:isEOF()
			Flux::Parsing::Statement:parse(source);
	else
		source:error "expected '{' after namespace name";

	let statements = source:popBlock();

	source:push( new Flux::Parsing::NamespaceStatement( name, new Flux::Parsing::Block( statements, position ), position ) );

	return true;
}

string NamespaceStatement:serialize()
	= "namespace " `concat` self.name `concat` " " `concat` self.block:serialize();
