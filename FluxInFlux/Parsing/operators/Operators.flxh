
namespace Flux::Parsing::Operator;

/*private*/ class Binary {
	bool left_assoc;
	string symbol;
	int precedence;

	Binary(string op, int prec, bool lassoc) {
		self.symbol = op;
		self.precedence = prec;
		self.left_assoc = lassoc;
	}
}

/*private*/ enum UnaryOpcode {
	Call, MethodCall;
	DotIndex, Index;
	Cast;
	PlusPlusR, MinusMinusR;
	PlusPlus, MinusMinus;
	Unm, Len, Not, BNot, Deref;
}

bool{string} operators;
Binary[] binary_operators;
bool{UnaryOpcode}{UnaryOpcode} unary_precedences;

string parse_binary_operator(Source source);

void register_binary(string op, int precedence, bool left_assoc);
bool is_binary(string op);
Binary get_binary(string op);

void set_unary_precedence(UnaryOpcode a, UnaryOpcode b);
bool get_unary_precedence(UnaryOpcode a, UnaryOpcode b);

void init_standard_operators();
