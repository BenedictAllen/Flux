
namespace Flux::Parsing::Operator;

Binary[] binary_operators;
bool{UnaryOpcode}{UnaryOpcode} unary_precedences;

void register_binary(string op, int precedence, bool left_assoc) {
	Flux::Parsing::Operator::binary_operators[
		#Flux::Parsing::Operator::binary_operators + 1
	] = new Flux::Parsing::Operator::Binary(
		op, precedence, left_assoc
	);
}

bool is_binary(string op) {
	foreach op_i in Flux::Parsing::Operator::binary_operators
		if op_i.symbol == op
			return true;
}

Binary get_binary(string op) {
	foreach op_i in Flux::Parsing::Operator::binary_operators
		if op_i.symbol == op
			return op_i;

	throw new StupidDerp "This really should never happen, make sure you've checked is_binary() before calling this";
}

void set_unary_precedence(UnaryOpcode a, UnaryOpcode b) {
	unary_precedences[a] = unary_precedences[a] || {};
	unary_precedences[b] = unary_precedences[b] || {};
	unary_precedences[a][b] = true;
	unary_precedences[b][a] = false;
}

bool get_unary_precedence(UnaryOpcode a, UnaryOpcode b) {
	if unary_precedences[a]
		return unary_precedences[a][b];
	return false;
}

void init_standard_operators() {
	Flux::Parsing::Operator::binary_operators = [];
	Flux::Parsing::Operator::unary_precedences = {};
	// binary equality operators
	Flux::Parsing::Operator::register_binary( "=", 1, false );

	Flux::Parsing::Operator::register_binary( "+=", 1, false );
	Flux::Parsing::Operator::register_binary( "-=", 1, false );
	Flux::Parsing::Operator::register_binary( "*=", 1, false );
	Flux::Parsing::Operator::register_binary( "/=", 1, false );
	Flux::Parsing::Operator::register_binary( "%=", 1, false );
	Flux::Parsing::Operator::register_binary( "**=", 1, false );

	Flux::Parsing::Operator::register_binary( "&=", 1, false );
	Flux::Parsing::Operator::register_binary( "|=", 1, false );
	Flux::Parsing::Operator::register_binary( "^=", 1, false );
	Flux::Parsing::Operator::register_binary( "<<=", 1, false );
	Flux::Parsing::Operator::register_binary( ">>=", 1, false );

	Flux::Parsing::Operator::register_binary( "&&=", 1, false );
	Flux::Parsing::Operator::register_binary( "||=", 1, false );

	// binary logical operators
	Flux::Parsing::Operator::register_binary( "||", 2, true );
	Flux::Parsing::Operator::register_binary( "&&", 3, true );

	// binary comparison operators
	Flux::Parsing::Operator::register_binary( ">", 4, true );
	Flux::Parsing::Operator::register_binary( "<", 4, true );
	Flux::Parsing::Operator::register_binary( "<=", 4, true );
	Flux::Parsing::Operator::register_binary( ">=", 4, true );
	Flux::Parsing::Operator::register_binary( "==", 4, true );
	Flux::Parsing::Operator::register_binary( "!=", 4, true );

	// binary range operator
	Flux::Parsing::Operator::register_binary( "..", 5, true );

	// binary bitwise operators
	Flux::Parsing::Operator::register_binary( "|", 6, true );
	Flux::Parsing::Operator::register_binary( "&", 7, true );
	Flux::Parsing::Operator::register_binary( "^", 8, true );
	Flux::Parsing::Operator::register_binary( "<<", 9, true );
	Flux::Parsing::Operator::register_binary( ">>", 9, true );

	// binary arithmetic operators
	Flux::Parsing::Operator::register_binary( "+", 10, true );
	Flux::Parsing::Operator::register_binary( "-", 10, true );
	Flux::Parsing::Operator::register_binary( "*", 11, true );
	Flux::Parsing::Operator::register_binary( "/", 11, true );
	Flux::Parsing::Operator::register_binary( "%", 11, true );
	Flux::Parsing::Operator::register_binary( "**", 12, false );

	// backtick invocation
	// Flux::Parsing::Operator::register( "backtick-left", Flux::Parsing::Operator.Mode.UNARY_L, 13, true, error );
	// Flux::Parsing::Operator::register( "backtick-right", Flux::Parsing::Operator::Mode.UNARY_R, 14, true, error );
	// Flux::Parsing::Operator::register( "backtick", Flux::Parsing::Operator::Mode.BINARY, 15, true, error );

	// left unary operators
	/*
	Flux::Parsing::Operator::register( "++", Flux::Parsing::Operator::Mode.UNARY_L, 16, true, Flux::Parsing::Operator::createSimpleSymbolParser "++" );
	Flux::Parsing::Operator::register( "--", Flux::Parsing::Operator::Mode.UNARY_L, 16, true, Flux::Parsing::Operator::createSimpleSymbolParser "--" );
	Flux::Parsing::Operator::register( "#", Flux::Parsing::Operator::Mode.UNARY_L, 16, true, Flux::Parsing::Operator::createSimpleSymbolParser "#" );
	Flux::Parsing::Operator::register( "!", Flux::Parsing::Operator::Mode.UNARY_L, 16, true, Flux::Parsing::Operator::createSimpleSymbolParser "!" );
	Flux::Parsing::Operator::register( "~", Flux::Parsing::Operator::Mode.UNARY_L, 16, true, Flux::Parsing::Operator::createSimpleSymbolParser "~" );
	Flux::Parsing::Operator::register( "-", Flux::Parsing::Operator::Mode.UNARY_L, 16, true, Flux::Parsing::Operator::createSimpleSymbolParser "-" );
	Flux::Parsing::Operator::register( "+", Flux::Parsing::Operator::Mode.UNARY_L, 16, true, Flux::Parsing::Operator::createSimpleSymbolParser "+" );

	// right unary arithmetic operators
	Flux::Parsing::Operator::register( "++", Flux::Parsing::Operator::Mode.UNARY_R, 17, true, Flux::Parsing::Operator::createSimpleSymbolParser "++" );
	Flux::Parsing::Operator::register( "--", Flux::Parsing::Operator::Mode.UNARY_R, 17, true, Flux::Parsing::Operator::createSimpleSymbolParser "--" );

	// right unary complex operators
	Flux::Parsing::Operator::register( "()", Flux::Parsing::Operator::Mode.UNARY_R, 17, true, error );
	Flux::Parsing::Operator::register( ":()", Flux::Parsing::Operator::Mode.UNARY_R, 17, true, error );
	Flux::Parsing::Operator::register( ".", Flux::Parsing::Operator::Mode.UNARY_R, 17, true, error );
	Flux::Parsing::Operator::register( "[]", Flux::Parsing::Operator::Mode.UNARY_R, 17, true, error );
	Flux::Parsing::Operator::register( "->", Flux::Parsing::Operator::Mode.UNARY_R, 17, true, error );

	// right unary type-based operators
	Flux::Parsing::Operator::register( "extends", Flux::Parsing::Operator::Mode.UNARY_R, 17, true, Flux::Parsing::Operator::createSimpleKeywordParser "extends" );
	Flux::Parsing::Operator::register( "typeof", Flux::Parsing::Operator::Mode.UNARY_R, 17, true, Flux::Parsing::Operator::createSimpleKeywordParser "typeof" );
	Flux::Parsing::Operator::register( "implements", Flux::Parsing::Operator::Mode.UNARY_R, 17, true, Flux::Parsing::Operator::createSimpleKeywordParser "implements" );

	// dereference
	Flux::Parsing::Operator::register( "*", Flux::Parsing::Operator::Mode.UNARY_L, 18, true, Flux::Parsing::Operator::createSimpleSymbolParser "*" );

	*/
}
