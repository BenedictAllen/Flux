
import UnaryOperatorExpressionStack;

namespace Flux::Parsing;

class BacktickExpressionStack {
	ASTNode term;
	ASTNode active_term;
	string binary_op;
	Position binary_op_pos;
	bool needs_merge;

	BacktickExpressionStack() {
		self.needs_merge = false;
	}

	private:
	ASTNode get_term(Source source);
	string parse_operator(Source source); // returns empty string if no operator found
	void update_term(string op, Position pos);
	void merge_terms();

	public:
	bool get_initial_term(Source source); // returns true if it got an initial expression, throws
	bool get_following_term(Source source); // returns true if it got to an expression and needs to be called again
	ASTNode result(); // does stuff
}
