
namespace Flux::Parsing;

string Context:resolve_definition_name(string name)
	= namespace_name != "" && namespace_name `concat` "::" `concat` name || name
	where namespace_name = self:get_flag "is_root_level" && self.namespace_name;

Context Context:specialise_root() {
	self:set_flag "is_root_level";
	return self;
}

Context Context:specialise_namespace(string name) {
	self.namespace_name = self.namespace_name != "" && self.namespace_name `concat` "::" `concat` name || name;
	return self;
}

Context Context:specialise_class(Type name) {
	self:set_flag "is_class";
	self:set_flag "is_parsing_body";
	self:set_flag "class_member_inherited_public_state";
	self:unset_flag "is_root_level";
	self.class_name = name;
	return self;
}

Context Context:specialise_interface(Type name) {
	self:set_flag "is_namespace";
	self:set_flag "is_parsing_body";
	self:unset_flag "class_member_inherited_public_state";
	self:unset_flag "is_root_level";
	self.class_name = name;
	return self;
}

Context Context:specialise_classname() {
	self:set_flag "is_parsing_classname";
	return self;
}

Context Context:specialise_function(bool is_vararg) {
	self:set_flag "is_function";
	self:set_flag( "is_vararg_function", is_vararg );
	self:unset_flag "is_loop";
	self:unset_flag "is_root_level";
	return self;
}

Context Context:specialise_loop() {
	self:set_flag "is_loop";
	self:unset_flag "is_root_level";
	return self;
}

Context Context:specialise_block() {
	self:unset_flag "is_root_level";
	return self;
}

void Context:set_flag(string f, null bool v = true) {
	self.flags[f] = v;
}

void Context:unset_flag(string f) {
	self.flags[f] = false;
}

bool Context:get_flag(string f)
	= self.flags[f] || false;
