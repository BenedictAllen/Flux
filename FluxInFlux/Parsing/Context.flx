
namespace Flux::Parsing;

string Context:resolveDefinitionName(string name)
	= namespace_name && namespace_name `concat` "::" `concat` name || name
	where namespace_name = self.isNamespace && self.namespace_name;

void Context:setPublic( bool isPublic ) {
	self.isPublic = isPublic;
}

Context Context:specialiseRoot() {
	self.root = true;
	return self;
}

Context Context:specialiseNamespace(string name) {
	self.isNamespace = true;
	self.namespace_name = self.namespace_name && self.namespace_name `concat` "::" `concat` name || name;
	return self;
}

Context Context:specialiseClass(Type name) {
	self.isClass = true;
	self.class_name = name;
	return self;
}

Context Context:specialiseClassname() {
	self.isClassname = true;
	return self;
}

Context Context:specialiseInterface(Type name) {
	self.isInterface = true;
	self.class_name = name;
	return self;
}

Context Context:specialiseFunction(null bool isVararg = false) {
	self.isFunction = true;
	self.isLoop = false;
	self.isVarargFunction = isVararg;
	return self;
}

Context Context:specialiseLoop() {
	self.isLoop = true;
	return self;
}
