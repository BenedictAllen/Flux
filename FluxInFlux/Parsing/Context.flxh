
/* flags include

	is_root_level - are class/interface/enum definitions valid
	is_function is_vararg_function - is return/... valid
	is_loop - is break/continue valid
	is_parsing_classname - are auto/struct etc valid for typenames
	is_class is_interface - differentiate class/interface bodies
	is_parsing_body - should definitions be treated as body definitions
	class_member_inherited_public_state - should a definition be public/private by default
	<probs some specific expression ones here, like using ',' like in C++>
	<^ can come later>
*/

namespace Flux::Parsing;

template<T>
const void copyt(T[] t)
	= throw new IdioticError "Welp, you haven't made copyt() elsewhere, congrats";

class Context {
	bool{string} flags;

	Type class_name;
	string namespace_name = "";

	Context(null Context parent) {
		self.flags = [];

		if parent foreach k, v in parent.flags
			self.flags[k] = copyt( v );
	}

	string resolve_definition_name(string name);

	Context specialise_root();
	Context specialise_classname();
	Context specialise_namespace(string name);
	Context specialise_class(Type name);
	Context specialise_interface(Type name);
	Context specialise_function(bool isVararg);
	Context specialise_loop();
	Context specialise_block();

	void set_flag(string f, null bool v = true);
	void unset_flag(string f);
	bool get_flag(string f);
}
