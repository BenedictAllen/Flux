
IRTypeSignature IRTypeSignature:fromAST(Flux::Parsing::Type t) {
	// lol no
}

IRTypeComparison IRTypeSignature:compare(IRTypeSignature sig) {
	if self.name == IRDefinitionPointer.auto_type || sig.name == IRDefinitionPointer.auto_type
		return IRTypeComparison.CastsTo;

	if sig.name == IRDefinitionPointer.void_type
		return IRTypeComparison.CastsTo;

	if self.name:definition() typeof IRClassDefinition && sig.name == IRDefinitionPointer.struct_type {
		// struct compare
	}

	if sig.name == IRDefinitionPointer.null_type {
		let compare_internal = self:compare( sig.classes[1] );
		if compare_internal == IRTypeComparison.CastsToTemplate
			return IRTypeComparison.CastsToTemplate;
		else if compare_internal != IRTypeComparison.NoMatch
			return IRTypeComparison.CastsTo;
	}

	if (sig typeof IRTypeSignatureTemplate) {
		int max = 0;

		foreach v in sig.classes
			max = math.max( IR_compare_weights[self:compare( v )], max );

		return IR_compare_lookup[max % 2 == 0 && max > 0 && max - 1 || max];
	}
	else if #self.classes != #sig.classes
		return IRTypeComparison.NoMatch;
	else {
		int min = IR_compare_weights[IRTypeComparison.ExactMatch];

		if self.name:eq( sig.name ) {
			min = IR_compare_weights[IRTypeComparison.ExactMatch];
		}
		else if (self.name:definition() typeof IRClassDefinition && sig.name:definition() typeof IRClassDefinition)
		     && self.name:definition():doesExtend( sig.name ) {
			min = IR_compare_weights[IRTypeComparison.ExtendsFrom];
		}
		else if (self.name:definition() typeof IRClassDefinition && sig.name:definition() typeof IRClassDefinition)
		     && self.name:definition():doesCastTo( sig.name ) {
			min = IR_compare_weights[IRTypeComparison.CastsTo];
		}
		else
			return IRTypeComparison.NoMatch;

		foreach i, v in self.classes
			min = math.min( IR_compare_weights[v:compare( sig.classes[i] )], min );

		return IR_compare_lookup[min];
	}
}

string IRTypeSignature:tostring() {
	string[] s = [];

	foreach i, v in self.classes
		s[i] = v:tostring();

	return self.name:definition().name `concat` "<" `concat` table.concat( s, ", " ) `concat` ">";
}
