
import Node;
import IASTConverter;
import Parsing.ASTNode;
import expressions.Expression;
import Declaration;
import constants;

namespace Flux::IR;

class Statement extends Flux::IR::Node implements Flux::IR::IASTConverter {

}

Node Statement:fromAST(State state, Parsing::ASTNode ast_node) {

	if (ast_node typeof Flux::Parsing::Declaration) {
		Flux::IR::Type type = Flux::IR::constants::auto_type();
		Flux::IR::Type[] _template = [];

		Declaration decl = state:declare(
			new Flux::IR::Declaration( type, ast_node.name, ast_node.is_public, ast_node.is_const, _template )
		);

		if ast_node.definition != null {
			decl:set_definition( haha_nope );
		}

		return Flux::IR::Node.nothing;
	}
	else { // it's an expression
		// return Flux::Parsing::Expression.fromAST( ast_node );

		return Flux::IR::Node.nothing;
	}

}
