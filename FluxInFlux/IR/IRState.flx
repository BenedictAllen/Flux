
// namespace Flux::Compiling;

void IRState:define( IRDefinition def ) {
	self.scopes[#self.scopes]:define( def );
}

IRDefinitionPointer[] IRState:lookup(string name, bool hasPrivate) {
	IRScope global = self.scopes[1];
	IRDefinitionPointer[] found = [];
	string[] isUsing = [];

	for (int i = #self.scopes, i > 1, i--) {
		let found = self.scopes[i]:lookup( name, hasPrivate );
		if #found > 0 return found;

		foreach u in s.isUsing
			table.insert( isUsing, 1, u );
	}

	foreach u in isUsing
		foreach v in global:lookup( table.concat( [u, name], "::" ), hasPrivate )
			found[#found + 1] = v;

	foreach v in global:lookup( name, hasPrivate )
		found[#found + 1] = v;

	return found;
}

IRDefinitionPointer IRState:lookupType(string name, bool hasPrivate) {
	IRDefinitionPointer[] list = self:lookup(name, hasPrivate);
	IRDefinitionPointer type = list[1];

	if type:definition() typeof IRClassDefinition
	|| type:definition() typeof IREnumDefinition
	|| type:definition() typeof IRInterfaceDefinition
		return type;

	return null;
}

void IRState:loadfile(string filename) {
	self.filenames[#self.filenames] = filename;
	self.files[self.filenames[#self.filenames]] = new IRDefinitionHeap();
}

void IRState:donefile()
	self.filenames[#self.filenames] = null;

void IRState:error(string err, Position position) {
	return error( table.concat( [position.source, "[", position.line, ", ", position.character, "]: ", err] ), 0 );
}

IRScope IRState:pushScope() {
	let scope = new IRScope( self.files[self.filenames[#self.filenames]] );
	self.scopes[#self.scopes + 1] = scope;
	return scope;
}

IRScope IRState:popScope() {
	return table.remove( self.scopes, #self.scopes );
}

void IRState:use( string name ) {
	self.scopes[#self.scopes]:use( name );
}
