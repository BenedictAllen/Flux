
import references.locations.LocalReferenceLocation;
import references.ScopedReference;

namespace Flux::IR;

class Scope {
	Declaration[] declarations;
	Scope parent;
	bool is_function_scope;

	Scope(Scope parent, bool is_function_scope) {
		self.parent = parent;
		self.is_function_scope = is_function_scope;

		self.declarations = [];
	}

	Declaration define(Declaration decl);
	Declaration[] lookup(string name);
	Declaration[] lookup_pattern(string pattern);
}

Declaration Scope:define(Declaration decl) {
	self.declarations[#self.declarations + 1] = decl;

	return decl;
}

Reference[] Scope:lookup(string name) {
	Reference[] references = [];

	for (int i = #self.declarations; i > 0; i--)
		if self.declarations[i].name == name
			references[#references + 1] = new Flux::IR::ScopedReference( new Flux::IR::LocalReferenceLocation(), self, i );

	return references;
}

Reference[] Scope:lookup_pattern(string pattern) {
	Reference[] references = [];

	for (int i = #self.declarations; i > 0; i--)
		if self.declarations[i].name:find( name )
			references[#references + 1] = new Flux::IR::ScopedReference( new Flux::IR::LocalReferenceLocation(), self, i );

	return references;
}
