
namespace Flux::IR;

class Scope {
	Declaration[] declarations;
	Scope parent;

	Scope(Scope parent) {
		self.parent = parent;

		self.declarations = [];
	}

	Declaration define(Declaration decl);
	Declaration[] lookup(string name);
	Declaration[] lookup_pattern(string pattern);
}

Declaration Scope:define(Declaration decl) {
	self.declarations[#self.declarations + 1] = decl;

	return decl;
}

Reference[] Scope:lookup(string name) {
	Reference[] references = [];

	for (int i = #self.declarations; i > 0; i--) {
		Declaration v = self.declarations[i];

		if v.name == name {}
			// references[#references + 1] = v;
	}

	return references;
}

Reference[] Scope:lookup_pattern(string pattern) {
	Reference[] references = [];

	for (int i = #self.declarations; i > 0; i--) {
		Declaration v = self.declarations[i];

		if v.name:find( pattern ) {}
			// references[#references + 1] = v;
	}

	return references;
}
