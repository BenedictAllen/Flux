
// namespace Flux::Compiling;

void IRScope:define(IRDefinition def) {
	self.definitions[#self.definitions + 1] = self.heap:define( def );
}

IRDefinitionPointer[] IRScope:lookup( string name, bool hasPrivate ) {
	IRDefinitionPointer[] matches = [];

	for (int i = #self.definitions, i > 0, i--) {
		let p = self.definitions[i];

		if p:definition().name == name && (hasPrivate || p:definition().isPublic) {
			bool isFunction = p:definition() typeof IRFunctionDefinition;

			if isFunction
				matches[#matches + 1] = p;
			else if #matches == 0 {
				matches[1] = p;
				break;
			}
		}
	}

	return matches;
}

void IRScope:use(string name) {
	self.isUsing[#self.isUsing + 1] = name;
}
