
import Node;
import Parsing.ASTNode;

namespace Flux::IR;

class FunctionCall extends Flux::IR::Node {
	Node value;
	Node[] parameters = [];

	FunctionCall(Node value, Node[] parameters) {
		self.value = value;
		self.parameters = parameters;
	}
}

Node FunctionCall:fromAST(State state, ASTNode ast_node) {
	throw new NiceTry "oh no you don't";
}

string FunctionCall:serialize()
	= #self.parameters > 0
	&& "call(" `concat` self.value:serialize() `concat` "," `concat` (self.parameters `concattenate` ",") `concat` ")"
	|| "call(" `concat` self.value:serialize() `concat` ")";
