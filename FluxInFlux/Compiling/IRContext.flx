
// namespace Flux::Compiling;

void IRContext:define(string name, bool isConst, IRType type, Position position) {
	self.scopes[#self.scopes]:define( name, isConst, type, position );
}
IRDefinitionPointer[] IRContext:lookup(string name) {
	string[] isUsing = [];

	for (int i = #self.scopes, i > 1, i--) {
		let found = self.scopes[i]:lookup( name );
		if #found > 0 return found;

		foreach u in self.scopes[i].isUsing
			table.insert( isUsing, 1, u );
	}

	IRScope global = self.scopes[1];
	IRDefinitionPointer[] found = [];

	foreach u in global.isUsing
		table.insert( isUsing, 1, u );

	foreach u in isUsing {
		foreach v in global:lookup( table.concat( [u, name], "::" ) )
			found[#found + 1] = v;
	}

	foreach v in global:lookup( name )
		found[#found + 1] = v;
	
	return found;
}

void IRContext:error(string err, Position position) {
	error( table.concat( [position.source, "[", position.line, ", ", position.character, "]: ", err] ), 0 );
}

IRScope IRContext:pushScope() {
	let scope = new IRScope( self.heap );
	self.scopes[#self.scopes + 1] = scope;
	return scope;
}
IRScope IRContext:popScope() {
	return table.remove( self.scopes, #self.scopes );
}

void IRContext:use( string name ) {
	self.scopes[#self.scopes]:use( name );
}
