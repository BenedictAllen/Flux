
v0.1.0
	Parsing
		[ ] Add some sort of foreign function/variable/class interface
			`extern<some_func> int f() void;`
			`extern<some_class> class C {}`
		[ ] Add `void` functions for externs
		[x] Notes at top of LetStatement.flx
		[x] `using MyNamespace in {}` `using my_object in {}` <- probs involves tracking namespaces, rip
		[x] `new int[5]`, `string[] repeat(string s, int n) = new string[n]( s );`
		[x] Add function declarations
		[x] Fix function-type parsing not allowing varargs

	IR
		[ ] Declarations
		[ ] Variable lookups
		[ ] AST -> IR conversion
		[ ] Function specialisation based on parameter count

	Compilation
		[ ] Basic compilation to Lua

	stdlib
		[ ] Lua-only stuff

v0.1.1
	Parsing
		[ ]	Add preprocessor instruction support
		[ ] Class definitions
		[ ] Add #! removal from the first line
		[ ] Auto-generate headers for source-only imports (all non-auto decls)
		[ ] Optimise statement/expression parsing
		[ ] Fix abc<T>:abc() not classing as definition
		[ ] `using MyClass for literal.integer;`
		[ ] `let len = dx ** 2 + dy ** 2 where dx = x1 - x2, dy = y1 - y2;`
		[ ] Allow empty block for `while` and `for` loops
		[ ] Lambda function expressions
		[ ] Allow `while x;` and `for (...);`

	IR
		[ ] Type checking

	Compilation
		[ ] Optimisation

	stdlib
		[ ] A bunch of stuff
